@typeparam TItem
@inject IHttpRepository _httpRepository
@inject INotificationService _notificationService

@if (AllowCrudOps.AlowAdd)
{
  <div class="mb-2 row">
    <div class="col-12 text-end">
      <NavLink Match="@NavLinkMatch.Prefix" href="@OpRoutes?.AddUrl">
        <RadzenButton Text="Agregar" Icon="add"/>
      </NavLink>
    </div>
  </div>
}

@if (ItemList is null)
{
  <CircularLoading/>
}
else
{
  <div class="my-3">
    <RadzenDataGrid @ref="DataGrid" Count="@TotalCount"
                    Data="@_itemList"
                    LoadData="@(e => LoadData(e, DataGrid.CurrentPage, DataGrid.PageSize))"
                    AllowFiltering="@AllowFilter"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="@FilterMode" AllowPaging="true"
                    EmptyText="No hay datos que mostrar" AllowSorting="true"
                    PagerPosition="PagerPosition.TopAndBottom" TItem="TItem"
                    AllowColumnResize="AllowColumnResize"
                    ColumnWidth="150px" AndOperatorText="Y"
                    ApplyFilterText="Aplicar" ClearFilterText="Limpiar"
                    ContainsText="Contiene" DoesNotContainText="No contiene"
                    EndsWithText="Termina con" EqualsText="Es igual"
                    FilterText="Filtrar" GreaterThanOrEqualsText="Mayor o igual"
                    GreaterThanText="Mayor" LessThanOrEqualsText="Menor o igual"
                    IsNullText="Fecha es nula" IsNotNullText="Fecha no nula"
                    AllowFilterDateInput="true" FilterDateFormat="dd/MM/yyyy"
                    LessThanText="Menor" NotEqualsText="Diferente" OrOperatorText="O"
                    StartsWithText="Empieza con" PageSizeOptions="new[] { 10, 20, 50, 100 }">
      <Columns>
        @if (PropNames.Length > 0 && Headers.Length > 0)
        {
          var i = 0;
          @foreach (var propiedad in PropNames)
          {
            <RadzenDataGridColumn TItem="TItem" Property="@propiedad" Title="@Headers[i]"/>
            i++;
          }
        }

        @if (CustomGridCols is not null)
        {
          @CustomGridCols
        }

        @if (AllowCrudOps.AllowEdit)
        {
          <RadzenDataGridColumn TItem="TItem" Context="item"
                                Filterable="false" Sortable="false"
                                TextAlign="@TextAlign.Center" Width="70px">
            <Template>
              <NavLink Match="@NavLinkMatch.Prefix"
                       href="@($"{OpRoutes?.EditUrl}/{item.GetType().GetProperties()[0].GetValue(item)}")">
                <RadzenButton Icon="edit" ButtonStyle="@ButtonStyle.Secondary">
                </RadzenButton>
              </NavLink>
            </Template>
          </RadzenDataGridColumn>
        }
        @if (AllowCrudOps.AllowDelete)
        {
          <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false"
                                TextAlign="@TextAlign.Center" Width="70px">
            <Template>
              <RadzenButton Icon="delete" ButtonStyle="@ButtonStyle.Danger"
                            Click="@(() => OpenDeleteWarningDialog(item.GetType().GetProperties()[0].GetValue(item)?.ToString()))"/>
            </Template>
          </RadzenDataGridColumn>
        }

      </Columns>
    </RadzenDataGrid>
  </div>
}