@using System.Globalization
@inject DialogService DialogService
@inject IHttpRepository HttpRepo
@inject INotificationService NotificationService

<div class="container-fluid">
  <EditForm Model="_citaRequest" OnValidSubmit="AddCita">

    @if (_errorList.Count > 0)
    {
      <div class="mb-2">
        <ul class="text-danger">
          @foreach (var error in _errorList)
          {
            <li>@error</li>
          }
        </ul>
      </div>
    }
    <div class="mb-3 row">
      <div class="col-md-3">
        <RadzenLabel Text="Fecha Inicio" />
      </div>
      <div class="col-md-9">
        <RadzenDatePicker @bind-Value="_citaRequest.FechaInicio" Name="Fecha Inicio" ShowTime="true" class="w-100"
          DateFormat="g" Culture="CultureInfo.CurrentCulture" />
      </div>
    </div>
    <div class="mb-3 row">
      <div class="col-md-3">
        <RadzenLabel Text="Fecha Finalización" />
      </div>
      <div class="col-md-9">
        <RadzenDatePicker @bind-Value="_citaRequest.FechaFin" Name="Fecha Finalización" ShowTime="true" class="w-100"
          DateFormat="g" Culture="CultureInfo.CurrentCulture" />
      </div>
    </div>
    <div class="mb-3 row">
      <div class="col-md-3">
        <RadzenLabel Text="Doctor o Especialista" />
      </div>
      <div class="col-md-9">
        <RadzenDropDownWithPopup @ref="_medicoDropDown" DataList="_medicos" @bind-Value="_citaRequest.MedicoId"
          DropDownTextProperty="FullInfo">
          <ChildContend>
            <CascadingValue Value="_isBussy">
              <MedicoForm MedicoRequestDto="_medicoRequest" OnSubmit="AddDoctor" ShowCancelLink="false"
                OnCancel="@(async () => { await RadzenPopupHelper.ClosePopup(_medicoDropDown); _medicoRequest = new(); })" />
            </CascadingValue>
          </ChildContend>
        </RadzenDropDownWithPopup>
      </div>
    </div>
    <div class="mb-3 row">
      <div class="col-md-3">
        <RadzenLabel Text="Paciente" />
      </div>
      <div class="col-md-9">
        <RadzenDropDownWithPopup @ref="_pacienteDropDown" DataList="_pacientes" @bind-Value="_citaRequest.PacienteId"
          DropDownTextProperty="FullInfo">
          <ChildContend>
            <CascadingValue Value="_isBussy">
              <PacienteForm PacienteRequestDto="_pacienteRequest" OnSubmit="AddPaciente" ShowCancelLink="false"
                OnCancel="@(async () => { await RadzenPopupHelper.ClosePopup(_pacienteDropDown); _pacienteRequest = new(); })" />
            </CascadingValue>
          </ChildContend>
        </RadzenDropDownWithPopup>
      </div>
    </div>
    <div class="mb-3 row">
      <div class="col-md-3">
        <RadzenLabel Text="Actividades" />
      </div>
      <div class="col-md-9">
        @if (_actividades is not null)
        {
          <RadzenDropDownWithPopup @ref="_actividadesDropDown" DataList="_actividades" DropDownTextProperty="Nombre"
            TValue="List<string>" TSource="ActividadResponseDto" Value="_actividadesIds"
            DropDownAllowMultipleSelection="true" ValueChanged="SelectActividad">
            <ChildContend>
              <CascadingValue Value="_isBussy">
                <ActividadForm ActividadModel="_actividadRequest" OnSubmit="AddActividad" ShowCancelLink="false"
                  OnCancel="@(async () => { await RadzenPopupHelper.ClosePopup(_actividadesDropDown); _actividadRequest = new(); })" />
              </CascadingValue>
            </ChildContend>
          </RadzenDropDownWithPopup>
        }
      </div>
    </div>
    <div class="mt-4 row">
      <div class="col-md-3"></div>
      <div class="col-md-9">
        <div class="row">
          <div class="col-6">
            <RadzenButton ButtonType="@ButtonType.Submit" Text="Guardar" Style="width: 100%" Icon="save" />
          </div>
          <div class="col-6">
            <RadzenButton Text="Cancelar" Icon="cancel" ButtonStyle="ButtonStyle.Danger" Style="width: 100%"
              Click="@(() => DialogService.Close())" />
          </div>
        </div>
      </div>
    </div>
  </EditForm>
</div>

@code {

  [Parameter]
  public DateTime StartDate { get; set; }

  [Parameter]
  public DateTime EndDate { get; set; }

  private RadzenDropDownWithPopup<string, MedicoCitaResponseDto> _medicoDropDown = default!;
  private RadzenDropDownWithPopup<string, PacienteCitaResponseDto> _pacienteDropDown = default!;
  private RadzenDropDownWithPopup<List<string>, ActividadResponseDto> _actividadesDropDown = default!;

  private List<MedicoCitaResponseDto>? _medicos;
  private List<PacienteCitaResponseDto>? _pacientes;
  private List<ActividadResponseDto>? _actividades;
  private List<string>? _actividadesIds;
  private readonly List<string> _errorList = new();

  private readonly CitaRequestDto _citaRequest = new();
  private MedicoRequestDto _medicoRequest = new();
  private PacienteRequestDto _pacienteRequest = new();
  private ActividadRequestDto _actividadRequest = new();

  private bool _isBussy;

  #region Lifecycle Methods

  protected override void OnParametersSet()
  {
    _citaRequest.FechaInicio = StartDate;
    _citaRequest.FechaFin = EndDate;
  }

  protected override async Task OnInitializedAsync()
  {
    _actividades = await RequestResourceListAsync<ActividadResponseDto>("api/Actividad/listar");
    _pacientes = await RequestResourceListAsync<PacienteCitaResponseDto>("api/Paciente/listar");
    _medicos = await RequestResourceListAsync<MedicoCitaResponseDto>("api/Medico/listar");
  }

  #endregion

  #region Appointment Methods

  private async Task<List<T>?> RequestResourceListAsync<T>(string? reqUrl)
  {
    var httpResp = await HttpRepo.Get<List<T>>(reqUrl ?? "");
    return httpResp.Response;
  }

  private bool ValidateDates()
  {
    _errorList.Clear();

    var timeInicio = TimeOnly.FromDateTime(_citaRequest.FechaInicio);
    var timeFin = TimeOnly.FromDateTime(_citaRequest.FechaFin);
    if (timeInicio.Hour < 8 || timeFin.Hour > 22)
    {
      _errorList.Add("Los tiempos de inicio y fin deben esta en el rango de 8:00 - 20:00");
      return false;
    }

    if (_citaRequest.FechaInicio.CompareTo(_citaRequest.FechaFin) == 0)
    {
      _errorList.Add("Los tiempos de inicio y fin de la cita no pueden ser iguales");
      return false;
    }

    if (_citaRequest.FechaInicio <= _citaRequest.FechaFin) return true;
    _errorList.Add("La fecha de inicio debe ser menor que la fecha de finalización");

    return false;
  }

  private bool ValidateCitaRequest()
  {
    var result = true;

    if (_citaRequest.ActividadesCita.Count == 0)
    {
      _errorList.Add("Debe seleccionar al menos una Actividad");
      result = false;
    }

    if (string.IsNullOrEmpty(_citaRequest.MedicoId))
    {
      _errorList.Add("Debe seleccionar un Doctor para la Cita");
      result = false;
    }

    if (string.IsNullOrEmpty(_citaRequest.PacienteId))
    {
      _errorList.Add("Debe seleccionar un Paciente para la Cita");
      result = false;
    }

    return result;
  }

  private void AddCita()
  {
    if (!ValidateDates())
      return;

    if (!ValidateCitaRequest())
      return;

    DialogService.Close(_citaRequest);
  }

  private void SelectActividad(object value)
  {
    _citaRequest.ActividadesCita.Clear();

    var actividadesIds = (IEnumerable<string>)value;

    _citaRequest.ActividadesCita.AddRange(actividadesIds
    .Select(actId => new ActividadCitaRequestDto
      {
        ActividadId = actId
      }));
  }

  #endregion

  #region Add Shortcut Methods

  private async Task AddDoctor()
  {
    _isBussy = true;

    var httpResp = await HttpRepo.Post("api/Medico/crear", _medicoRequest);

    _isBussy = false;

    if (!httpResp.Error)
    {
      NotificationService.ShowSuccess("Operacion exitosa!",
      "Registro creado con éxito");
      _medicos = await RequestResourceListAsync<MedicoCitaResponseDto>("api/Medico/listar");
      await RadzenPopupHelper.ClosePopup(_medicoDropDown);
      _medicoRequest = new();
    }
  }

  private async Task AddPaciente()
  {
    _pacienteRequest.DateRegistered = DateTime.Now;

    _isBussy = true;

    var httpResp = await HttpRepo.Post("api/Paciente/crear", _pacienteRequest);

    _isBussy = false;

    if (!httpResp.Error)
    {
      NotificationService.ShowSuccess("Operacion exitosa!", "Registro creado con éxito");
      _pacientes = await RequestResourceListAsync<PacienteCitaResponseDto>("api/Paciente/listar");
      await RadzenPopupHelper.ClosePopup(_pacienteDropDown);
      _pacienteRequest = new();
    }
  }

  private async Task AddActividad()
  {
    _isBussy = true;

    var httpResp = await HttpRepo.Post("api/Actividad/crear", _actividadRequest);

    _isBussy = false;

    if (!httpResp.Error)
    {
      NotificationService.ShowSuccess("Operación Exitosa!", "Actividad creada con éxito");
      _actividades = await RequestResourceListAsync<ActividadResponseDto>("api/Actividad/listar");
      await RadzenPopupHelper.ClosePopup(_actividadesDropDown);
      _actividadRequest = new();
    }
  }

  #endregion

}