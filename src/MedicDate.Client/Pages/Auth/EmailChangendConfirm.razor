@page "/usuario/emailChangedConfirm"
@using MedicDate.Shared.Models.Auth
@inject NavigationManager _navigationManager
@inject IAuthenticationService _authService
@inject IHttpRepository _httpRepo
@inject INotificationService _notificationService

<div class="container">
   <h2 class="text-radzen-primary">Actualizar Email</h2>

   <p class="my-2">Ingrese su nuevo email una vez más.</p>

   <ErrorBoundary>
      <RadzenCard>
         <EditForm Model="_changeEmailDto" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
               <RadzenLabel Text="Ingrese el nuevo email" />
               <div class="mt-1">
                  <RadzenTextBox @bind-Value="_changeEmailDto.NewEmail"
                                 class="w-100" />
                  <ValidationMessage For="() => _changeEmailDto.NewEmail" />
               </div>
            </div>

            <div class="mb-2">
               <FormButtons SaveButtonText="Enviar"
                            CancelLinkRoute="/usuarioList" />
            </div>
         </EditForm>
      </RadzenCard>
   </ErrorBoundary>

   @if (_isChangeEmailSuccess)
   {
      <div class="alert alert-success my-2">
         Su email ha sido actualizado con éxito.
      </div>
      <NavLink href="/login">
         <RadzenButton Text="inicia sesión" Click="IniciarSession" />
      </NavLink>
   }
</div>
@code {
   [CascadingParameter]
   public Task<AuthenticationState>? AuthenticationState { get; set; }

   [SupplyParameterFromQuery]
   [Parameter]
   public string? Code { get; set; }

   [SupplyParameterFromQuery]
   [Parameter]
   public string? UserId { get; set; }

   private AuthenticationState? _authState;
   private readonly ChangeEmailDto _changeEmailDto = new();
   private bool _isChangeEmailSuccess;

   protected override async Task OnInitializedAsync()
   {
      _authState = await AuthenticationState!;

      if (Code is null || UserId is null)
      {
         _notificationService.ShowError("Error!", "Error al cambiar el email");
      }
   }

   private async Task IniciarSession()
   {
      if (_authState!.User.Identity is not null)
      {
         if (_authState.User.Identity.IsAuthenticated)
         {
            await _authService.Logout();
         }

      }

      _navigationManager.NavigateTo("/login");
   }

   private async Task OnSubmit()
   {
      _changeEmailDto.Code = Code ?? "";

      var httpResp = await _httpRepo.Post($"api/Account/changeEmail/{UserId}", _changeEmailDto);

      if (!httpResp.Error)
      {
         _isChangeEmailSuccess = true;
      }
   }

}