@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime
@inject IHttpInterceptorProvider _httpInterceptorProvider
@implements IDisposable
 
<div style="width: 100%;">
  <RadzenBody @ref="@body" @bind-Expanded="@bodyExpanded">
    <ChildContent>
      <RadzenContentContainer Name="main">
        <div>
          <RadzenHeader>
            <ChildContent>
              <AppHeader OnToggleClick="@ChangeToggle"/>
            </ChildContent>
          </RadzenHeader>
        </div>
        <div class="pb-3">
          @Body
        </div>
      </RadzenContentContainer>
    </ChildContent>
  </RadzenBody>
</div>

<RadzenSidebar @ref="@sidebar" @bind-Expanded="@sidebarExpanded">
  <ChildContent>
    <AppSideBar/>
  </ChildContent>
</RadzenSidebar>

@* <RadzenFooter class="bg-light">
    <ChildContent>
    <AppFooter/>
    </ChildContent>
    </RadzenFooter> *@

<RadzenDialog/>
<RadzenNotification Style="position: absolute; top: 20px"/>
<RadzenContextMenu/>
<RadzenTooltip/>

@code {
  RadzenSidebar sidebar = null!;
  RadzenBody body = null!;
  bool sidebarExpanded = true;
  bool bodyExpanded = false;

  protected override async Task OnInitializedAsync()
  {
    var result = await _jsRuntime.InvokeAsync<bool>("isSmWindow");

    if (result)
    {
      sidebarExpanded = false;
      bodyExpanded = true;
    }

    _httpInterceptorProvider.AuthTokenInterceptor.RegisterEvent();
    _httpInterceptorProvider.ErrorInterceptor.RegisterEvent();
  }


  protected override async void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      await _jsRuntime.InvokeVoidAsync("expandSidebarOnSmScreen");
    }
  }

  private void ChangeToggle()
  {
    sidebarExpanded = !sidebarExpanded;
    bodyExpanded = !bodyExpanded;
  }

  public void Dispose()
  {
    _httpInterceptorProvider.AuthTokenInterceptor.DisposeEvent();
    _httpInterceptorProvider.ErrorInterceptor.DisposeEvent();
  }

}